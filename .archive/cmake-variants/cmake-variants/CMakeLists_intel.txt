# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.16)  # Increased for PCH support

include(FetchContent)

project(gemma)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Include custom modules
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../cmake)

# Intel OneAPI Options (New)
option(GEMMA_USE_INTEL_ONEAPI "Enable full Intel OneAPI optimizations" OFF)
option(GEMMA_USE_INTEL_MKL "Use Intel MKL for optimized BLAS operations" OFF)
option(GEMMA_USE_INTEL_IPP "Use Intel IPP for signal processing" OFF)
option(GEMMA_USE_INTEL_TBB "Use Intel TBB for threading" OFF)
option(GEMMA_USE_INTEL_DNNL "Use Intel DNNL for deep learning operations" OFF)
option(GEMMA_USE_INTEL_SYCL "Enable Intel SYCL for GPU offload" OFF)

# Build optimization options
option(GEMMA_ENABLE_UNITY_BUILDS "Enable unity builds for faster compilation" OFF)
option(GEMMA_ENABLE_LTO "Enable Link Time Optimization" ON)
option(GEMMA_ENABLE_PCH "Enable Precompiled Headers" ON)

# Include Intel OneAPI configuration if enabled
if(GEMMA_USE_INTEL_ONEAPI OR GEMMA_USE_INTEL_MKL OR GEMMA_USE_INTEL_IPP OR GEMMA_USE_INTEL_TBB)
    include(IntelOneAPIConfig)
endif()

# Include standard optimizations if available
if(EXISTS "${CMAKE_MODULE_PATH}/GemmaOptimizations.cmake")
    include(GemmaOptimizations)
    setup_gemma_build_optimizations()
    setup_build_profiles()
endif()

FetchContent_Declare(highway GIT_REPOSITORY https://github.com/google/highway.git GIT_TAG 1d16731233de45a365b43867f27d0a5f73925300 EXCLUDE_FROM_ALL)
FetchContent_MakeAvailable(highway)

## Note: absl needs to be installed by sentencepiece. This will only happen if
## cmake is invoked with -DSPM_ENABLE_SHARED=OFF and -DSPM_ABSL_PROVIDER=module
FetchContent_Declare(sentencepiece GIT_REPOSITORY https://github.com/google/sentencepiece GIT_TAG 53de76561cfc149d3c01037f0595669ad32a5e7c EXCLUDE_FROM_ALL)
FetchContent_MakeAvailable(sentencepiece)

FetchContent_Declare(json GIT_REPOSITORY https://github.com/nlohmann/json.git GIT_TAG 9cca280a4d0ccf0c08f47a99aa71d1b0e52f8d03 EXCLUDE_FROM_ALL)
FetchContent_MakeAvailable(json)

set(BENCHMARK_ENABLE_TESTING OFF)
set(BENCHMARK_ENABLE_GTEST_TESTS OFF)

FetchContent_Declare(benchmark GIT_REPOSITORY https://github.com/google/benchmark.git GIT_TAG v1.8.2 EXCLUDE_FROM_ALL)
FetchContent_MakeAvailable(benchmark)

# Base source files
set(SOURCES
  compression/compress-inl.h
  compression/compress.cc
  compression/compress.h
  compression/nuq-inl.h
  compression/sfp-inl.h
  compression/types.h
  compression/test_util-inl.h
  evals/benchmark_helper.cc
  evals/benchmark_helper.h
  evals/cross_entropy.cc
  evals/cross_entropy.h
  gemma/activations.h
  gemma/attention.cc
  gemma/attention.h
  gemma/configs.cc
  gemma/configs.h
  gemma/gemma_args.h
  gemma/gemma-inl.h
  gemma/gemma.cc
  gemma/gemma.h
  gemma/griffin.cc
  gemma/griffin.h
  gemma/kv_cache.cc
  gemma/kv_cache.h
  gemma/model_store.cc
  gemma/model_store.h
  gemma/tensor_info.cc
  gemma/tensor_info.h
  gemma/tokenizer.cc
  gemma/tokenizer.h
  gemma/vit.cc
  gemma/vit.h
  gemma/weights.cc
  gemma/weights.h
  io/blob_store.cc
  io/blob_store.h
  io/fields.cc
  io/fields.h
  io/io_win.cc
  io/io.cc
  io/io.h
  ops/dot-inl.h
  ops/dry_penalty.cc
  ops/dry_penalty.h
  ops/matmul_static_bf16.cc
  ops/matmul_static_f32.cc
  ops/matmul_static_nuq.cc
  ops/matmul_static_sfp.cc
  ops/matmul-inl.h
  ops/matmul.cc
  ops/matmul.h
  ops/matvec-inl.h
  ops/ops-inl.h
  ops/ops.h
  ops/sum-inl.h
  paligemma/image.cc
  paligemma/image.h
  util/allocator.cc
  util/allocator.h
  util/basics.h
  util/mat.cc
  util/mat.h
  util/test_util.h
  util/threading_context.cc
  util/threading_context.h
  util/threading.cc
  util/threading.h
  util/topology.cc
  util/topology.h
)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

FetchContent_GetProperties(sentencepiece)

## Library Target

add_library(libgemma ${SOURCES})
set_property(TARGET libgemma PROPERTY CXX_STANDARD 20)
set_target_properties(libgemma PROPERTIES PREFIX "")
set_property(TARGET libgemma PROPERTY POSITION_INDEPENDENT_CODE ON)
target_include_directories(libgemma PUBLIC ./)
target_link_libraries(libgemma hwy hwy_contrib sentencepiece-static)
target_include_directories(libgemma PUBLIC ${sentencepiece_SOURCE_DIR})
target_compile_definitions(libgemma PRIVATE $<$<PLATFORM_ID:Windows>:_CRT_SECURE_NO_WARNINGS NOMINMAX>)
target_compile_options(libgemma PRIVATE $<$<AND:$<PLATFORM_ID:Windows>,$<CXX_COMPILER_ID:Clang>>:-Wno-deprecated-declarations>)

# Apply Intel OneAPI optimizations if enabled
if(GEMMA_USE_INTEL_ONEAPI OR GEMMA_USE_INTEL_MKL OR GEMMA_USE_INTEL_IPP OR GEMMA_USE_INTEL_TBB)
    apply_intel_optimizations(libgemma)
endif()

# Enable precompiled headers if requested
if(GEMMA_ENABLE_PCH)
    target_precompile_headers(libgemma PRIVATE
        <algorithm>
        <array>
        <cmath>
        <cstddef>
        <cstdint>
        <cstring>
        <memory>
        <string>
        <utility>
        <vector>
    )
endif()

# Enable Link Time Optimization if requested
if(GEMMA_ENABLE_LTO)
    set_property(TARGET libgemma PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

## gemma Executable

add_executable(gemma examples/run.cc)
target_link_libraries(gemma libgemma hwy hwy_contrib)
target_compile_definitions(gemma PRIVATE $<$<PLATFORM_ID:Windows>:_CRT_SECURE_NO_WARNINGS NOMINMAX>)

# Apply Intel OneAPI optimizations to executable if enabled
if(GEMMA_USE_INTEL_ONEAPI OR GEMMA_USE_INTEL_MKL OR GEMMA_USE_INTEL_IPP OR GEMMA_USE_INTEL_TBB)
    apply_intel_optimizations(gemma)
endif()

## single_benchmark Executable

add_executable(single_benchmark evals/benchmark.cc)
target_link_libraries(single_benchmark libgemma hwy hwy_contrib benchmark benchmark_main)
target_compile_definitions(single_benchmark PRIVATE $<$<PLATFORM_ID:Windows>:_CRT_SECURE_NO_WARNINGS NOMINMAX>)

# Apply Intel OneAPI optimizations to benchmark if enabled
if(GEMMA_USE_INTEL_ONEAPI OR GEMMA_USE_INTEL_MKL OR GEMMA_USE_INTEL_IPP OR GEMMA_USE_INTEL_TBB)
    apply_intel_optimizations(single_benchmark)
    setup_intel_benchmarking(single_benchmark)
endif()

## cross_entropy Executable

add_executable(cross_entropy evals/cross_entropy_main.cc)
target_link_libraries(cross_entropy libgemma hwy hwy_contrib)
target_compile_definitions(cross_entropy PRIVATE $<$<PLATFORM_ID:Windows>:_CRT_SECURE_NO_WARNINGS NOMINMAX>)

# Apply Intel OneAPI optimizations to cross_entropy if enabled
if(GEMMA_USE_INTEL_ONEAPI OR GEMMA_USE_INTEL_MKL OR GEMMA_USE_INTEL_IPP OR GEMMA_USE_INTEL_TBB)
    apply_intel_optimizations(cross_entropy)
endif()

## Export functions for backtraces

set(CMAKE_ENABLE_EXPORTS ON)

# Print configuration summary
message(STATUS "")
message(STATUS "========== Gemma Build Configuration ==========")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "")
message(STATUS "Intel OneAPI Options:")
message(STATUS "  Full OneAPI Suite: ${GEMMA_USE_INTEL_ONEAPI}")
message(STATUS "  Intel MKL: ${GEMMA_USE_INTEL_MKL}")
message(STATUS "  Intel IPP: ${GEMMA_USE_INTEL_IPP}")
message(STATUS "  Intel TBB: ${GEMMA_USE_INTEL_TBB}")
message(STATUS "  Intel DNNL: ${GEMMA_USE_INTEL_DNNL}")
message(STATUS "  Intel SYCL: ${GEMMA_USE_INTEL_SYCL}")
message(STATUS "")
message(STATUS "Build Optimizations:")
message(STATUS "  Link Time Optimization: ${GEMMA_ENABLE_LTO}")
message(STATUS "  Precompiled Headers: ${GEMMA_ENABLE_PCH}")
message(STATUS "  Unity Builds: ${GEMMA_ENABLE_UNITY_BUILDS}")
message(STATUS "===============================================")
message(STATUS "")