name: Self-Hosted Runner Management

# Automated setup and management of self-hosted runners for gemma.cpp
# Handles registration, health checks, and deployment automation

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'setup'
        type: choice
        options:
          - setup
          - health-check
          - update
          - cleanup
      runner_type:
        description: 'Type of runner to manage'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
          - linux-gpu
          - linux-intel
          - windows-gpu
      runner_labels:
        description: 'Additional runner labels (comma-separated)'
        required: false
        default: 'gemma,cpp,compilation'
        type: string

env:
  RUNNER_VERSION: '2.311.0'
  RUNNER_ARCH: 'x64'

jobs:
  # ==========================================================================
  # Self-Hosted Runner Registration and Setup
  # ==========================================================================
  setup-runners:
    name: Setup Self-Hosted Runners
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'setup'
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        runner_config:
          - name: 'linux-cpu'
            labels: 'self-hosted,Linux,X64,gemma,cpp,cpu'
            requirements: 'build-essential,cmake,ninja-build,ccache'
          - name: 'linux-gpu'
            labels: 'self-hosted,Linux,X64,gemma,cpp,gpu,cuda'
            requirements: 'build-essential,cmake,ninja-build,ccache,cuda-toolkit'
          - name: 'linux-intel'
            labels: 'self-hosted,Linux,X64,gemma,cpp,intel,sycl'
            requirements: 'build-essential,cmake,ninja-build,ccache,intel-oneapi'
          - name: 'windows-cpu'
            labels: 'self-hosted,Windows,X64,gemma,cpp,cpu'
            requirements: 'visual-studio,cmake,ninja'
          - name: 'windows-gpu'
            labels: 'self-hosted,Windows,X64,gemma,cpp,gpu,cuda'
            requirements: 'visual-studio,cmake,ninja,cuda-toolkit'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate runner registration script
      id: generate-script
      run: |
        cat > setup-runner-${{ matrix.runner_config.name }}.sh << 'EOF'
        #!/bin/bash
        # Self-hosted runner setup script for ${{ matrix.runner_config.name }}
        # Generated by GitHub Actions on $(date)

        set -e

        RUNNER_NAME="${{ matrix.runner_config.name }}-$(hostname)-$(date +%s)"
        RUNNER_LABELS="${{ matrix.runner_config.labels }},${{ github.event.inputs.runner_labels }}"
        WORK_DIR="/opt/actions-runner-${{ matrix.runner_config.name }}"

        echo "Setting up self-hosted runner: $RUNNER_NAME"
        echo "Labels: $RUNNER_LABELS"
        echo "Work directory: $WORK_DIR"

        # Create work directory
        sudo mkdir -p $WORK_DIR
        sudo chown $(whoami):$(whoami) $WORK_DIR
        cd $WORK_DIR

        # Download and extract runner
        curl -o actions-runner-linux-${{ env.RUNNER_ARCH }}-${{ env.RUNNER_VERSION }}.tar.gz \
          -L https://github.com/actions/runner/releases/download/v${{ env.RUNNER_VERSION }}/actions-runner-linux-${{ env.RUNNER_ARCH }}-${{ env.RUNNER_VERSION }}.tar.gz
        tar xzf ./actions-runner-linux-${{ env.RUNNER_ARCH }}-${{ env.RUNNER_VERSION }}.tar.gz

        # Install dependencies
        sudo ./bin/installdependencies.sh

        # Configure runner (requires manual token input)
        echo "Run the following command to configure the runner:"
        echo "./config.sh --url https://github.com/${{ github.repository }} --token YOUR_TOKEN --name $RUNNER_NAME --labels \"$RUNNER_LABELS\" --work _work --replace"

        # Create systemd service
        sudo ./svc.sh install
        sudo ./svc.sh start

        echo "Runner setup completed!"
        echo "Verify status with: sudo ./svc.sh status"
        EOF

        chmod +x setup-runner-${{ matrix.runner_config.name }}.sh
        echo "script_name=setup-runner-${{ matrix.runner_config.name }}.sh" >> $GITHUB_OUTPUT

    - name: Generate Windows PowerShell script
      if: contains(matrix.runner_config.name, 'windows')
      run: |
        cat > setup-runner-${{ matrix.runner_config.name }}.ps1 << 'EOF'
        # Self-hosted runner setup script for ${{ matrix.runner_config.name }}
        # Generated by GitHub Actions on $(Get-Date)

        $ErrorActionPreference = "Stop"

        $RunnerName = "${{ matrix.runner_config.name }}-$(hostname)-$(Get-Date -Format "yyyyMMddHHmmss")"
        $RunnerLabels = "${{ matrix.runner_config.labels }},${{ github.event.inputs.runner_labels }}"
        $WorkDir = "C:\actions-runner-${{ matrix.runner_config.name }}"

        Write-Host "Setting up self-hosted runner: $RunnerName"
        Write-Host "Labels: $RunnerLabels"
        Write-Host "Work directory: $WorkDir"

        # Create work directory
        New-Item -ItemType Directory -Path $WorkDir -Force
        Set-Location $WorkDir

        # Download and extract runner
        Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v${{ env.RUNNER_VERSION }}/actions-runner-win-${{ env.RUNNER_ARCH }}-${{ env.RUNNER_VERSION }}.zip" -OutFile "actions-runner.zip"
        Expand-Archive -Path "actions-runner.zip" -DestinationPath . -Force

        Write-Host "Run the following command to configure the runner:"
        Write-Host ".\config.cmd --url https://github.com/${{ github.repository }} --token YOUR_TOKEN --name $RunnerName --labels `"$RunnerLabels`" --work _work --replace"

        Write-Host "Then install as service:"
        Write-Host ".\svc.sh install"
        Write-Host ".\svc.sh start"

        Write-Host "Runner setup completed!"
        EOF

    - name: Upload runner setup scripts
      uses: actions/upload-artifact@v4
      with:
        name: runner-setup-scripts-${{ matrix.runner_config.name }}
        path: setup-runner-${{ matrix.runner_config.name }}.*
        retention-days: 30

  # ==========================================================================
  # Runner Health Check and Monitoring
  # ==========================================================================
  health-check:
    name: Runner Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'health-check'
    timeout-minutes: 15

    steps:
    - name: Check runner availability
      id: check-runners
      uses: actions/github-script@v7
      with:
        script: |
          const { data: runners } = await github.rest.actions.listSelfHostedRunnersForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const runnerTypes = {
            'linux-cpu': 0,
            'linux-gpu': 0,
            'linux-intel': 0,
            'windows-cpu': 0,
            'windows-gpu': 0
          };

          const runnerHealth = [];

          runners.forEach(runner => {
            const isOnline = runner.status === 'online';
            const labels = runner.labels.map(l => l.name).join(',');

            runnerHealth.push({
              name: runner.name,
              status: runner.status,
              busy: runner.busy,
              labels: labels,
              os: runner.os
            });

            // Count runners by type
            if (labels.includes('linux') && labels.includes('cpu')) runnerTypes['linux-cpu']++;
            if (labels.includes('linux') && labels.includes('gpu')) runnerTypes['linux-gpu']++;
            if (labels.includes('linux') && labels.includes('intel')) runnerTypes['linux-intel']++;
            if (labels.includes('windows') && labels.includes('cpu')) runnerTypes['windows-cpu']++;
            if (labels.includes('windows') && labels.includes('gpu')) runnerTypes['windows-gpu']++;
          });

          console.log('Runner Health Summary:');
          console.log(JSON.stringify(runnerHealth, null, 2));

          console.log('\nRunner Type Counts:');
          console.log(JSON.stringify(runnerTypes, null, 2));

          // Check if we have minimum required runners
          const minRequired = {
            'linux-cpu': 1,
            'windows-cpu': 1
          };

          const insufficient = [];
          Object.keys(minRequired).forEach(type => {
            if (runnerTypes[type] < minRequired[type]) {
              insufficient.push(`${type}: ${runnerTypes[type]}/${minRequired[type]}`);
            }
          });

          if (insufficient.length > 0) {
            core.setFailed(`Insufficient runners: ${insufficient.join(', ')}`);
          } else {
            console.log('✅ All required runners are available');
          }

          return {
            runners: runnerHealth,
            counts: runnerTypes,
            insufficient: insufficient
          };

    - name: Generate runner health report
      run: |
        cat > runner-health-report.md << 'EOF'
        # Self-Hosted Runner Health Report

        Generated: $(date)
        Repository: ${{ github.repository }}

        ## Summary

        This report shows the current status of self-hosted runners for the gemma.cpp project.

        ## Runner Requirements for gemma.cpp

        - **Linux CPU**: Basic compilation and testing
        - **Linux GPU**: CUDA backend builds and testing
        - **Linux Intel**: SYCL/Intel oneAPI backend builds
        - **Windows CPU**: Windows native builds
        - **Windows GPU**: Windows CUDA builds

        ## Recommendations

        1. Ensure runners have adequate resources:
           - CPU: 8+ cores for parallel compilation
           - RAM: 16GB+ for large builds
           - Storage: 100GB+ for build caches and artifacts

        2. Install required tools:
           - CMake 3.20+
           - Ninja build system
           - Appropriate compilers (GCC/Clang/MSVC)
           - Hardware-specific SDKs (CUDA, Intel oneAPI)

        3. Configure build caches:
           - ccache for Linux builds
           - sccache for cross-platform caching

        EOF

        echo "Runner health report generated"

  # ==========================================================================
  # Runner Environment Update
  # ==========================================================================
  update-environment:
    name: Update Runner Environment
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'update'
    timeout-minutes: 20

    steps:
    - name: Generate update script
      run: |
        cat > update-runner-environment.sh << 'EOF'
        #!/bin/bash
        # Runner environment update script
        # Run this on each self-hosted runner to update dependencies

        set -e

        echo "Updating runner environment for gemma.cpp..."

        # Update system packages
        if [ -f /etc/debian_version ]; then
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y \
            build-essential cmake ninja-build ccache \
            pkg-config git curl wget \
            python3 python3-pip \
            clang-format-14 ruff black
        elif [ -f /etc/redhat-release ]; then
          sudo yum update -y
          sudo yum groupinstall -y "Development Tools"
          sudo yum install -y cmake ninja-build ccache pkg-config git curl wget python3 python3-pip
        fi

        # Update CMake to latest version if needed
        CMAKE_VERSION=$(cmake --version | head -n1 | cut -d' ' -f3)
        echo "Current CMake version: $CMAKE_VERSION"

        # Update ccache configuration
        ccache --set-config=max_size=10G
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6

        # Install Python tools
        python3 -m pip install --upgrade pip pre-commit ruff black mypy

        # Clean up
        ccache --cleanup

        echo "Environment update completed!"
        echo "CMake version: $(cmake --version | head -n1)"
        echo "Ninja version: $(ninja --version)"
        echo "ccache version: $(ccache --version | head -n1)"
        EOF

        chmod +x update-runner-environment.sh

    - name: Upload update script
      uses: actions/upload-artifact@v4
      with:
        name: runner-update-script
        path: update-runner-environment.sh
        retention-days: 30

  # ==========================================================================
  # Cleanup and Maintenance
  # ==========================================================================
  cleanup:
    name: Cleanup Runners
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'cleanup'
    timeout-minutes: 10

    steps:
    - name: List offline runners
      uses: actions/github-script@v7
      with:
        script: |
          const { data: runners } = await github.rest.actions.listSelfHostedRunnersForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const offlineRunners = runners.filter(runner => runner.status === 'offline');

          console.log(`Found ${offlineRunners.length} offline runners`);

          if (offlineRunners.length > 0) {
            console.log('Offline runners:');
            offlineRunners.forEach(runner => {
              console.log(`- ${runner.name} (${runner.os}, last seen: ${runner.last_activity})`);
            });

            // Note: Actual removal would require manual confirmation
            console.log('\n⚠️  To remove offline runners, use the GitHub UI or run:');
            offlineRunners.forEach(runner => {
              console.log(`gh api repos/${{ github.repository }}/actions/runners/${runner.id} -X DELETE`);
            });
          } else {
            console.log('✅ No offline runners found');
          }

  # ==========================================================================
  # Documentation and Reporting
  # ==========================================================================
  generate-documentation:
    name: Generate Runner Documentation
    runs-on: ubuntu-latest
    if: always()
    needs: [setup-runners, health-check, update-environment, cleanup]

    steps:
    - name: Create runner documentation
      run: |
        mkdir -p docs/

        cat > docs/SELF_HOSTED_RUNNERS.md << 'EOF'
        # Self-Hosted Runners for gemma.cpp

        This document describes the self-hosted runner setup for the gemma.cpp project.

        ## Runner Types

        ### Linux Runners
        - `self-hosted-linux`: Basic CPU builds
        - `self-hosted-linux-gpu`: CUDA-enabled builds
        - `self-hosted-linux-intel`: Intel oneAPI/SYCL builds

        ### Windows Runners
        - `self-hosted-windows`: Basic CPU builds
        - `self-hosted-windows-gpu`: CUDA-enabled builds

        ## Setup Process

        1. **Download Setup Scripts**: Use the runner management workflow to generate setup scripts
        2. **Configure Environment**: Run the environment setup script on each runner
        3. **Register Runner**: Use the GitHub runner token to register with the repository
        4. **Install as Service**: Configure the runner to start automatically

        ## Requirements

        ### Hardware Requirements
        - **CPU**: 8+ cores (16+ recommended for parallel builds)
        - **RAM**: 16GB minimum (32GB recommended)
        - **Storage**: 100GB+ free space for builds and caches
        - **GPU** (for GPU runners): NVIDIA GPU with CUDA support

        ### Software Requirements
        - **Linux**: Ubuntu 20.04+ or equivalent
        - **Windows**: Windows Server 2019+ or Windows 10/11
        - **CMake**: 3.20 or later
        - **Compilers**: GCC 11+, Clang 14+, or MSVC 2022
        - **Build Tools**: Ninja, ccache/sccache

        ## Maintenance

        ### Regular Tasks
        - Monitor runner health via GitHub Actions
        - Update dependencies monthly
        - Clean build caches when storage is low
        - Rotate runner tokens annually

        ### Troubleshooting
        - Check runner logs: `journalctl -u actions.runner.*`
        - Verify connectivity: Test GitHub API access
        - Clean workspace: Remove old build artifacts
        - Restart service: `sudo systemctl restart actions.runner.*`

        ## Security Considerations

        - Runners should be on isolated networks
        - Regular OS security updates
        - Monitor for unauthorized access
        - Limit runner permissions to minimum required

        ## Performance Optimization

        - Use fast NVMe storage for build directories
        - Configure large build caches (ccache/sccache)
        - Use local package mirrors when possible
        - Monitor CPU and memory usage during builds
        EOF

        echo "Runner documentation generated"

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: runner-documentation
        path: docs/
        retention-days: 90