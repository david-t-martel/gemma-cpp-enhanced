// version.h.in - Auto-generated version information
// DO NOT EDIT - This file is generated by CMake from cmake/version.h.in

#pragma once

#include <string>

namespace gemma {
namespace version {

// Version components
constexpr int MAJOR = @VERSION_MAJOR@;
constexpr int MINOR = @VERSION_MINOR@;
constexpr int PATCH = @VERSION_PATCH@;

// Version strings
constexpr const char* VERSION = "@VERSION_STRING@";
constexpr const char* VERSION_FULL = "@VERSION_FULL@";
constexpr const char* BUILD_IDENTIFIER = "@BUILD_IDENTIFIER@";

// Git information
constexpr const char* GIT_COMMIT_HASH = "@GIT_COMMIT_HASH@";
constexpr const char* GIT_COMMIT_HASH_FULL = "@GIT_COMMIT_HASH_FULL@";
constexpr const char* GIT_BRANCH = "@GIT_BRANCH@";
constexpr const char* GIT_TAG = "@GIT_TAG@";
constexpr bool GIT_DIRTY = @GIT_DIRTY@;
constexpr const char* GIT_COMMIT_DATE = "@GIT_COMMIT_DATE@";
constexpr const char* GIT_AUTHOR_NAME = "@GIT_AUTHOR_NAME@";

// Build information
constexpr const char* BUILD_TYPE = "@CMAKE_BUILD_TYPE@";
constexpr const char* BUILD_VARIANT = "@BUILD_VARIANT@";
constexpr const char* BUILD_TIMESTAMP = "@BUILD_TIMESTAMP@";
constexpr const char* BUILD_HASH = "@BUILD_HASH@";

// Compiler information
constexpr const char* COMPILER_NAME = "@COMPILER_NAME@";
constexpr const char* COMPILER_VERSION = "@COMPILER_VERSION@";
constexpr const char* COMPILER_ID = "@CMAKE_CXX_COMPILER_ID@";

// Platform information
constexpr const char* SYSTEM_NAME = "@CMAKE_SYSTEM_NAME@";
constexpr const char* SYSTEM_PROCESSOR = "@CMAKE_SYSTEM_PROCESSOR@";

// Feature flags
#cmakedefine GEMMA_ENABLE_SYCL
#cmakedefine GEMMA_ENABLE_CUDA
#cmakedefine GEMMA_ENABLE_VULKAN
#cmakedefine GEMMA_USE_ONEAPI_LIBS
#cmakedefine GEMMA_USE_TBB
#cmakedefine GEMMA_USE_IPP
#cmakedefine GEMMA_USE_DNNL

// Helper functions
inline std::string get_version_string() {
    return std::string(VERSION);
}

inline std::string get_full_version_string() {
    return std::string(VERSION_FULL);
}

inline std::string get_build_info() {
    std::string info;
    info += "Gemma.cpp " + std::string(VERSION_FULL) + "\n";
    info += "Build: " + std::string(BUILD_IDENTIFIER) + "\n";
    info += "Commit: " + std::string(GIT_COMMIT_HASH_FULL) + "\n";
    info += "Branch: " + std::string(GIT_BRANCH) + "\n";
    info += "Date: " + std::string(BUILD_TIMESTAMP) + "\n";
    info += "Compiler: " + std::string(COMPILER_NAME) + " " + std::string(COMPILER_VERSION) + "\n";
    info += "Platform: " + std::string(SYSTEM_NAME) + " " + std::string(SYSTEM_PROCESSOR);
    return info;
}

inline std::string get_short_version() {
    std::string version_str = std::string(VERSION);
    if (GIT_DIRTY) {
        version_str += "-dirty";
    }
    version_str += " (";
    version_str += std::string(GIT_COMMIT_HASH);
    version_str += ")";
    return version_str;
}

} // namespace version
} // namespace gemma
