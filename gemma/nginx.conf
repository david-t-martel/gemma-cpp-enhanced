# Nginx Load Balancer Configuration for Gemma.cpp Enhanced
# Optimized for MCP server load balancing and high availability

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=inference:10m rate=30r/m;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream configuration for Gemma.cpp MCP servers
    upstream gemma_mcp_backend {
        # Load balancing method
        least_conn;

        # Backend servers
        server gemma-cpu:8080 weight=3 max_fails=2 fail_timeout=30s;
        server gemma-cuda:8080 weight=5 max_fails=2 fail_timeout=30s backup;

        # Health check (requires nginx-plus or custom module)
        # server gemma-all:8082 weight=2 max_fails=2 fail_timeout=30s;

        # Connection pooling
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Upstream for benchmarking endpoints
    upstream gemma_benchmark_backend {
        server gemma-benchmark:8080 weight=1 max_fails=1 fail_timeout=60s;
        keepalive 8;
    }

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost gemma.local;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn addr 10;

        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }

        # Load balancer status
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Main MCP server proxy
        location / {
            # Proxy headers
            proxy_pass http://gemma_mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;  # Longer timeout for inference

            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # Keep connections alive
            proxy_set_header Connection "";

            # Error handling
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # Inference endpoint with stricter rate limiting
        location /inference {
            limit_req zone=inference burst=5 nodelay;

            proxy_pass http://gemma_mcp_backend/inference;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Extended timeouts for inference
            proxy_connect_timeout 10s;
            proxy_send_timeout 120s;
            proxy_read_timeout 600s;

            # Disable buffering for streaming responses
            proxy_buffering off;
            proxy_cache off;

            # Error handling
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
        }

        # Streaming endpoint (if supported)
        location /stream {
            proxy_pass http://gemma_mcp_backend/stream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Streaming optimizations
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 86400s;  # 24 hours for long streams
            proxy_send_timeout 86400s;

            # Chunked transfer encoding
            chunked_transfer_encoding on;
        }

        # Benchmark endpoints (limited access)
        location /benchmark {
            # Restrict access to internal networks
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://gemma_benchmark_backend/benchmark;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Long timeout for benchmarks
            proxy_read_timeout 1800s;  # 30 minutes
            proxy_send_timeout 1800s;
        }

        # Metrics endpoint (Prometheus)
        location /metrics {
            # Restrict access to monitoring systems
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://gemma_mcp_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Disable caching for metrics
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Static assets (if any)
        location /static {
            root /usr/share/nginx/html;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }

        # WebSocket upgrade handling
        location /ws {
            proxy_pass http://gemma_mcp_backend/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # WebSocket timeout
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /404.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost gemma.local;

        # SSL configuration (update paths as needed)
        # ssl_certificate /etc/ssl/certs/gemma.crt;
        # ssl_certificate_key /etc/ssl/private/gemma.key;

        # SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Same location blocks as HTTP server
        # ... (copy from above)
    }

    # Redirect HTTP to HTTPS (uncomment if using SSL)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name localhost gemma.local;
    #     return 301 https://$server_name$request_uri;
    # }
}

# Stream configuration for TCP load balancing (if needed)
stream {
    # Upstream for direct TCP connections
    upstream gemma_tcp_backend {
        server gemma-cpu:8080;
        server gemma-cuda:8080 backup;
    }

    # TCP load balancer
    server {
        listen 9090;
        proxy_pass gemma_tcp_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
}