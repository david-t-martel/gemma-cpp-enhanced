# Comprehensive pre-commit hooks configuration for Gemma LLM Stats project
# Optimized for hybrid Python 3.13/Rust/TypeScript development
# https://pre-commit.com/

default_language_version:
  python: python3.13
  node: '20.18.0'

repos:
  # ================================
  # PHASE 1: BASIC FILE VALIDATION
  # ================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # File format and whitespace fixes
      - id: trailing-whitespace
        args: ['--markdown-linebreak-ext=md']
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: ['--fix=lf']

      # Configuration file validation
      - id: check-yaml
        exclude: '^\.github/workflows/'  # Allow GitHub Actions extensions
      - id: check-json
      - id: check-toml

      # Security and safety checks
      - id: check-added-large-files
        args: ['--maxkb=50000', '--enforce-all']  # Allow large models but enforce limit
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: detect-private-key

      # Code quality checks
      - id: check-ast  # Python syntax validation
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']

  # ================================
  # PHASE 2: PYTHON CODE QUALITY
  # ================================
  # Python formatting with Ruff (faster than Black)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.0
    hooks:
      - id: ruff
        args: ['--fix', '--exit-non-zero-on-fix']
        types_or: [python, pyi]
      - id: ruff-format
        types_or: [python, pyi]

  # Python type checking with MyPy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.18.1
    hooks:
      - id: mypy
        additional_dependencies:
          - pydantic>=2.0.0
          - types-requests>=2.31.0
          - types-setuptools>=69.0.0
          - types-PyYAML
          - types-redis
        args: ['--strict', '--ignore-missing-imports', '--python-version=3.13']
        files: '^src/'
        exclude: '^(tests/|examples/|archived/)'

  # ================================
  # PHASE 3: SECURITY SCANNING
  # ================================
  # Python security analysis with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-ll', '--skip', 'B101,B601']  # Skip assert and shell usage warnings
        files: '\.py$'
        exclude: '^(tests/|examples/)'

  # Secrets detection with detect-secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline', '--exclude-files', '\.lock$|\.min\.js$|\.map$']
        exclude: '^(\.git/|\.mypy_cache/|\.pytest_cache/|htmlcov/|dist/|build/)'

  # Safety check for Python dependencies
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.4.2
    hooks:
      - id: python-safety-dependencies-check
        args: ['--short-report']
        files: 'requirements.*\.txt$|pyproject\.toml$'

  # ================================
  # PHASE 4: RUST CODE QUALITY
  # ================================
  - repo: local
    hooks:
      # Rust formatting
      - id: rust-format
        name: Rust Format (cargo fmt)
        entry: cargo fmt --all -- --check
        language: system
        files: '\.rs$'
        pass_filenames: false

      # Rust linting
      - id: rust-clippy
        name: Rust Clippy (lint)
        entry: cargo clippy --workspace --all-targets --all-features -- -D warnings -D clippy::all -D clippy::pedantic -A clippy::module_name_repetitions
        language: system
        files: '\.rs$'
        pass_filenames: false

      # Rust security audit
      - id: rust-audit
        name: Rust Security Audit
        entry: cargo audit --deny warnings
        language: system
        files: 'Cargo\.(toml|lock)$'
        pass_filenames: false

  # ================================
  # PHASE 5: DOCUMENTATION & CONFIG
  # ================================
  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        args: ['--fix', '--config', '.markdownlint.json']
        exclude: '^(archived/|\.github/)'

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        args: ['-d', '{extends: relaxed, rules: {line-length: {max: 120}, comments: {min-spaces-from-content: 1}}}']
        exclude: '^(\.github/workflows/)'

  # ================================
  # PHASE 6: PROJECT-SPECIFIC VALIDATION
  # ================================
  - repo: local
    hooks:
      # Python testing with comprehensive coverage
      - id: pytest-fast
        name: Fast Python Tests (unit only)
        entry: uv run pytest tests/unit/ --maxfail=1 --quiet -x --no-cov
        language: system
        pass_filenames: false
        stages: [pre-commit]

      # Coverage check for critical paths
      - id: coverage-check
        name: Test Coverage Check (85% minimum)
        entry: uv run pytest --cov=src --cov-fail-under=85 --cov-report=term-missing:skip-covered --quiet
        language: system
        pass_filenames: false
        stages: [pre-push]

      # Python import optimization
      - id: optimize-imports
        name: Optimize Python Imports (isort)
        entry: uv run python -m isort --check-only --diff src/ tests/
        language: system
        types: [python]
        files: '^(src/|tests/)'

      # Validate pyproject.toml dependencies
      - id: validate-pyproject
        name: Validate pyproject.toml structure
        entry: uv run python scripts/validate_pyproject.py
        language: system
        files: 'pyproject\.toml$'
        pass_filenames: false

      # Check model file sizes (prevent accidental large commits)
      - id: check-model-size
        name: Check Model File Sizes (<50MB)
        entry: uv run python scripts/check_model_size.py
        language: system
        files: '\.(pt|pth|safetensors|bin|gguf)$'
        args: ['--max-size-mb', '50']

      # Validate MCP server configurations
      - id: validate-mcp-config
        name: Validate MCP Configuration
        entry: uv run python scripts/validate_mcp_integration.py
        language: system
        files: '(mcp|config).*\.(json|toml|yaml|yml)$'
        pass_filenames: false

      # Rust test suite
      - id: rust-test
        name: Rust Test Suite
        entry: cargo test --workspace --all-features
        language: system
        files: '\.rs$'
        pass_filenames: false
        stages: [pre-push]

      # Check Rust dependencies for vulnerabilities
      - id: rust-deny
        name: Rust Dependency Security Check
        entry: cargo deny --all-features check
        language: system
        files: 'Cargo\.(toml|lock)$'
        pass_filenames: false

      # Python docstring quality
      - id: docstring-coverage
        name: Python Docstring Coverage
        entry: uv run docstr-coverage src/ --fail-under=80
        language: system
        types: [python]
        files: '^src/'

      # Performance regression prevention
      - id: benchmark-check
        name: Performance Benchmark Check
        entry: uv run python -c "print('Benchmark check passed - implement when needed')"
        language: system
        files: '^(src/|rust_extensions/)'
        stages: [pre-push]
        pass_filenames: false

  # ================================
  # PHASE 7: INFRASTRUCTURE VALIDATION
  # ================================
  - repo: local
    hooks:
      # Docker configuration validation
      - id: docker-validate
        name: Validate Dockerfile
        entry: docker run --rm -i hadolint/hadolint < Dockerfile
        language: system
        files: 'Dockerfile.*'
        pass_filenames: false

      # GitHub Actions workflow validation
      - id: github-actions-validate
        name: Validate GitHub Actions
        entry: uv
        args: ['run', 'python', '-c', 'import yaml; import sys; [yaml.safe_load(open(f, "r", encoding="utf-8")) for f in sys.argv[1:]]']
        language: system
        files: '^\.github/workflows/.*\.ya?ml$'
        verbose: true

      # Environment file security check
      - id: env-file-check
        name: Check Environment Files
        entry: bash
        args: ['-c', 'if [[ -f .env ]]; then echo "Warning: .env file detected. Ensure no secrets are committed."; grep -E "(API_KEY|SECRET|PASSWORD|TOKEN)" .env && exit 1 || exit 0; fi']
        language: system
        files: '\.env.*'
        pass_filenames: false

# ================================
# GLOBAL CONFIGURATION
# ================================

# Files and directories to exclude from all hooks
exclude: |
  (?x)^(
    # Python cache and build directories
    \.venv/.*|
    venv/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    \.ruff_cache/.*|
    dist/.*|
    build/.*|
    .*\.egg-info/.*|
    htmlcov/.*|
    coverage\.xml|
    \.coverage.*|

    # Rust build artifacts
    target/.*|
    Cargo\.lock|

    # Node.js artifacts (if any)
    node_modules/.*|
    \.npm/.*|

    # IDE and editor files
    \.vscode/.*|
    \.idea/.*|
    \.DS_Store|

    # Archive and deprecated code
    archived/.*|
    deprecated/.*|
    legacy/.*|

    # Large model files (handle separately)
    models/.*\.bin|
    models/.*\.safetensors|
    models/.*\.pt|
    models/.*\.pth|

    # Generated documentation
    docs/_build/.*|
    site/.*|

    # Temporary and log files
    .*\.tmp|
    .*\.log|
    .*\.swp|
    .*\.bak
  )$

# Performance and execution settings
fail_fast: false  # Continue running all hooks even if one fails
minimum_pre_commit_version: 3.5.0

# Hook execution stages
default_stages: [pre-commit, pre-push]

# CI-specific configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: monthly
  skip: [rust-clippy, rust-audit, rust-test, rust-deny]  # Skip slow Rust checks in CI
  submodules: false
